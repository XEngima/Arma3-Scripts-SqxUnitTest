/*
 * Name:	TestEngine
 * Date:	2018-11-19
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A class that runs all the registered tests.
 */
namespace Sqx.UnitTest
{
	public class TestEngine
	{
		private static fields ["_mTestUnits" as Array /* of TestUnit */, "_mMethodSucceeded" as Boolean, "_mAssertDone" as Boolean, "_mAllOutput" as String];
		private static fields ["_mCurrentNamespaceName" as String, "_mCurrentClassName" as String, "_mCurrentMethodName" as String, "_mFoundTestMethod" as Boolean];
		private static fields ["_mOnlyOneMethod" as Boolean];
		
		// Initializes the test engine.
		public static method Init {
			_mTestUnits = [];
			_mOnlyOneMethod = false;
		};
		
		// Registeres a test unit (a custom testclass with its test methods) so the testclass' tests can be executed.
		// _namespaceName (String): The dot-separated namespace name for the test class.
		// _className (String): The testclass' name.
		// _methodNames (Array): A list of names reflecting the test methods.
		public static method Register("_namespaceName" as String, "_className" as String, "_methodNames" as Array)
		{
			_mTestUnits pushBack [_namespaceName, _className, _methodNames] new TestUnit;
		};
		
		public static method OnlyThisOne("_methodName" as String)
		{
			private ["_lastTestUnit" as TestUnit];
			
			if (count _mTestUnits > 0) then {
				_lastTestUnit = _mTestUnits select (count _mTestUnits) - 1;
				_lastTestUnit.SingleMethodName = _methodName;
				_mOnlyOneMethod = true;
			};
		};
		
		// Outputs a text to the screen and the Arma 3 RPT file.
		// _text (String): The text to be written.
		private static method Output("_text" as String, ["_onlyToRpt" as Boolean, false])
		{
			private ["_crlf" as String];
			
			_crlf = toString [0x0D, 0x0A];
			
			if (!_onlyToRpt) then {
				player sideChat _text;
			};
			
			diag_log _text;
			_mAllOutput = _mAllOutput + _text + _crlf;
			copyToClipboard _mAllOutput;
		};
		
		public static method SetAssertDone()
		{
			_mAssertDone = true;
		};
		
		// Asserting a test and registeres it as failed.
		// Only used by the test framework, and should never be called explicitly.
		// _message (String): The test's error message to be shown for the test user.
		public static method WriteFailed("_message" as String)
		{
			if (_mMethodSucceeded) then // Just report one failed assert per test method.
			{
				//player sideChat ("FAILED: " + _mCurrentClassName + "." + _mCurrentMethodName + " - " + _message); // TODO SQX: Should work without parenthesis - ; disappears...
				[("FAILED: " + _mCurrentClassName + "." + _mCurrentMethodName + " - " + _message)] call _self.Output;
				_mMethodSucceeded = false;
			};
			
			throw false;
		};
		
		// Replaces a sub string within a string with another string.
		// _str (String): The string to be edited.
		// _find (String): The string to fine.
		// _replace (String): The string to replace the found strings.
		// Returns (String): The replaced string.
		private static method String StringReplace("_str" as String, "_find" as String, "_replace" as String)
		{
			private _return = "";
			private _len = count _find;	
			private _pos = _str find _find;
			
			while {(_pos != -1) && (count _str > 0)} do {
				_return = _return + (_str select [0, _pos]) + _replace;
				
				_str = (_str select [_pos+_len]);
				_pos = _str find _find;
			};
			
			_return + _str;
		};
		
		// Runs all the tests.
		private static method Run("_delayed" as Boolean)
		{
			private ["_sqfTestMethod" as String, "_successCount" as Scalar, "_failedCount" as Scalar, "_testUnit" as TestUnit, "_sqfClassName" as String, "_sConstructorFunction" as String, "_sqfBeforeEach" as String, "_sqfAfterEach" as String];
			private ["_startTime" as Scalar, "_processId" as Handle];
			
			_successCount = 0;
			_failedCount = 0;
			_mAllOutput = "";
			
			if (_delayed) then {
				sleep 3;
			};

			["RUNNING TESTS..."] call _self.Output;

			{
				_testUnit = _x;
				
				_mCurrentNamespaceName = _testUnit.NamespaceName;
				_mCurrentClassName = _testUnit.ClassName;
				_sqfClassName = ([_mCurrentNamespaceName, ".", "_"] call _self.StringReplace) + "_" + _mCurrentClassName;
				
				_sConstructorFunction = "cl_" + _sqfClassName + "_constructor";

				_startTime = time;
				waitUntil { time > _startTime + 5 || !(isNil compile _sConstructorFunction) };
				
				if (isNil compile _sConstructorFunction) then {
					[("MISSING: " + _mCurrentNamespaceName + "." + _mCurrentClassName + " - Test class was not found.")] call _self.Output;
				}
				else
				{
					{
						_mCurrentMethodName = _x;
						
						if ((_mOnlyOneMethod && _testUnit.SingleMethodName == _mCurrentMethodName) || !_mOnlyOneMethod) then
						{
							_mMethodSucceeded = true;
							_mAssertDone = false;
							_mFoundTestMethod = true;
							
							_sqfBeforeEach = _sqfClassName + "_BeforeEach";
							if (!isNil _sqfBeforeEach) then {
								call compile ("call " + _sqfBeforeEach);
							};
							
							_sqfTestMethod = _sqfClassName + "_" + _mCurrentMethodName + ";";
							
							if (isNil compile _sqfTestMethod) then {
								_mMethodSucceeded = false;
								_mFoundTestMethod = false;
								[("MISSING: " + _mCurrentClassName + "." + _mCurrentMethodName + " - Test method was not found.")] call _self.Output;
							}
							else {
								_processId = _sqfTestMethod spawn {
									try {
										call compile ("call " + _this);
									}
									catch {
									};
								};
								
								waitUntil { scriptDone _processId; };
							};
							
							if (_mMethodSucceeded && _mAssertDone) then {
								_successCount = _successCount + 1;
								[("PASSED: " + _mCurrentClassName + "." + _mCurrentMethodName), true] call _self.Output;
							}
							else {
								_failedCount = _failedCount + 1;
								
								if (!_mAssertDone && _mFoundTestMethod) then {
									[("FAILED: " + _mCurrentClassName + "." + _mCurrentMethodName + " - Assert never reached. (Forgot Assert?)"), false] call _self.Output;
								};
							};
							
							_sqfAfterEach = _sqfClassName + "_AfterEach";
							if (!(isNil compile _sqfAfterEach)) then {
								call compile ("call " + _sqfAfterEach);
							};
						};
					} foreach _testUnit.MethodNames as String;
				};
				
			} foreach _mTestUnits as TestUnit;
			
			["TOTAL: " + str (_successCount + _failedCount) + ". PASSED: " + str _successCount + ". FAILED: " + str _failedCount] call _self.Output;
			copyToClipboard _mAllOutput;
			["Full test report copied to clipboard."] call _self.Output;
		};
		
		// Starts a parallell task that runs all the tests.
		public static method RunAsync {
			[false] spawn _self.Run;
		};
		
		// Starts a parallell task that runs all the tests, but starts after 3 seconds.
		public static method RunDelayedAsync {
			[true] spawn _self.Run;
		};
	};
};
